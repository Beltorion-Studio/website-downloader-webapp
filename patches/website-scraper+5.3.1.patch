diff --git a/node_modules/website-scraper/lib/filename-generator/by-type.js b/node_modules/website-scraper/lib/filename-generator/by-type.js
index 0355451..50b92d7 100644
--- a/node_modules/website-scraper/lib/filename-generator/by-type.js
+++ b/node_modules/website-scraper/lib/filename-generator/by-type.js
@@ -1,60 +1,78 @@
 import path from 'path';
 import sanitizeFilename from 'sanitize-filename';
-import {shortenFilename, getFilenameExtension, getFilenameFromUrl} from '../utils/index.js';
+import url from 'url';
+import { shortenFilename, getFilenameExtension, getFilenameFromUrl } from '../utils/index.js';
 import typeExtensions from '../config/resource-ext-by-type.js';
 
-export default function generateFilename (resource, {subdirectories, defaultFilename}, occupiedFileNames) {
-	const occupiedNames = getSubDirectoryNames({subdirectories}).concat(occupiedFileNames);
+export default function generateFilename(
+ resource,
+ { subdirectories, defaultFilename },
+ occupiedFileNames
+) {
+ const occupiedNames = getSubDirectoryNames({ subdirectories }).concat(occupiedFileNames);
+ //Added
+ const resourceUrl = resource.getUrl();
+ const urlParsed = url.parse(resourceUrl);
+ /*   */
+ let filename = getFilenameForResource(resource, { subdirectories, defaultFilename });
+ filename = shortenFilename(sanitizeFilename(filename, { replacement: '_' }));
 
-	let filename = getFilenameForResource(resource, {subdirectories, defaultFilename});
-	filename = shortenFilename(sanitizeFilename(filename, {replacement: '_'}));
+ const extension = getFilenameExtension(filename);
+ const directory = getDirectoryByExtension(extension, { subdirectories, defaultFilename });
 
-	const extension = getFilenameExtension(filename);
-	const directory = getDirectoryByExtension(extension, {subdirectories, defaultFilename});
+ let currentFilename = path.join(directory, filename);
+ const basename = path.basename(filename, extension);
 
-	let currentFilename = path.join(directory, filename);
-	const basename = path.basename(filename, extension);
-	let index = 1;
+ //added
+ if (extension === '.html') {
+  let urlPath = urlParsed.path;
+  const lastSlashIndex = urlPath.lastIndexOf('/');
+  const substringBeforeLastSlash = urlPath.substring(1, lastSlashIndex + 1);
+  currentFilename = path.join(substringBeforeLastSlash, filename);
+  //console.log(currentFilename);
+ }
 
-	while (occupiedNames.includes(currentFilename)) {
-		currentFilename = path.join(directory, `${basename}_${index}${extension}`);
-		index++;
-	}
+ let index = 1;
 
-	return currentFilename;
+ while (occupiedNames.includes(currentFilename)) {
+  currentFilename = path.join(directory, `${basename}_${index}${extension}`);
+  index++;
+ }
+
+ return currentFilename;
 }
 
-function getFilenameForResource (resource, {defaultFilename}) {
-	const preferredFilename = resource.getFilename();
-	const urlFilename = getFilenameFromUrl(resource.getUrl());
-	let filename = preferredFilename || urlFilename || defaultFilename;
+function getFilenameForResource(resource, { defaultFilename }) {
+ const preferredFilename = resource.getFilename();
+ const urlFilename = getFilenameFromUrl(resource.getUrl());
+ let filename = preferredFilename || urlFilename || defaultFilename;
 
-	const resourceType = resource.getType();
-	let extension = getFilenameExtension(filename);
+ const resourceType = resource.getType();
+ let extension = getFilenameExtension(filename);
 
-	if (!extension && typeExtensions[resourceType]) {
-		extension = typeExtensions[resourceType][0];
-		filename += extension;
-	}
+ if (!extension && typeExtensions[resourceType]) {
+  extension = typeExtensions[resourceType][0];
+  filename += extension;
+ }
 
-	return filename;
+ return filename;
 }
 
-function getSubDirectoryNames ({subdirectories}) {
-	if (!subdirectories) {
-		return [];
-	}
-	return subdirectories.map(subdirectory => subdirectory.directory);
+function getSubDirectoryNames({ subdirectories }) {
+ if (!subdirectories) {
+  return [];
+ }
+ return subdirectories.map((subdirectory) => subdirectory.directory);
 }
 
-function getDirectoryByExtension (extension, {subdirectories}) {
-	if (!subdirectories) {
-		return '';
-	}
+function getDirectoryByExtension(extension, { subdirectories }) {
+ if (!subdirectories) {
+  return '';
+ }
 
-	const directories = subdirectories
-		.filter(subdirectory => subdirectory.extensions.includes(extension))
-		.map(subdirectory => subdirectory.directory);
+ const directories = subdirectories
+  .filter((subdirectory) => subdirectory.extensions.includes(extension))
+  .map((subdirectory) => subdirectory.directory);
 
-	return directories.length ? directories[0] : '';
+ return directories.length ? directories[0] : '';
 }
